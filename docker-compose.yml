services:
  # API Gateway: Traefik
  traefik:
    image: muyongzhen/agetutor:traefik-latest # v2.1.0
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # - "--entrypoints.websecure.address=:443"
      # - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      # - "--certificatesresolvers.myresolver.acme.email=myemail@example.com"
      # - "--certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme.json"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # - ./traefik/acme.json:/etc/traefik/acme.json
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
    restart: always

  # 中间件：RabbitMQ
  rabbitmq:
    image: muyongzhen/agetutor:rabbitmq-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # RabbitMQ 管理控制台
    networks:
      - app-network
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # 日志监控：Prometheus
  prometheus:
    image: muyongzhen/agetutor:prometheus-latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: always

  # 日志监控：Grafana
  grafana:
    image: muyongzhen/agetutor:grafana-latest
    container_name: grafana
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
      - ./monitoring/grafana.ini:/etc/grafana/grafana.ini:ro
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: always

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    image: muyongzhen/agetutor:frontend-latest
    depends_on:
      - traefik
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`) && Path(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
    ports:
      - "5173:5173"
    restart: always

  # 微服务guidebook-generator 后端
  guidebook-generator-backend:
    build:
      context: ./services/guidebook-generator/backend
      dockerfile: Dockerfile.backend
    image: muyongzhen/agetutor:guidebook-generator-backend-latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - app-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://guidebook-generator-backend:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.guidebook-generator-backend.rule=PathPrefix(`/guidebook-generator`)"
      - "traefik.http.services.guidebook-generator-backend.loadbalancer.server.port=8001"
    restart: on-failure

  # 微服务log-manager 后端
  log-manager-backend:
    build:
      context: ./services/log-manager/backend
      dockerfile: Dockerfile.backend
    image: muyongzhen/agetutor:log-manager-backend-latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - app-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://log-manager-backend:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.log-manager-backend.rule=PathPrefix(`/log-manager`)"
      - "traefik.http.services.log-manager-backend.loadbalancer.server.port=8002"
    restart: on-failure

  # 微服务tutorial-executor 后端
  tutorial-executor-backend:
    build:
      context: ./services/tutorial-executor/backend
      dockerfile: Dockerfile.backend
    image: muyongzhen/agetutor:tutorial-executor-backend-latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - app-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://tutorial-executor-backend:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tutorial-executor-backend.rule=PathPrefix(`/tutorial-executor`)"
      - "traefik.http.services.tutorial-executor-backend.loadbalancer.server.port=8003"
    restart: on-failure

  # 微服务tutorial-generator 后端
  tutorial-generator-backend:
    build:
      context: ./services/tutorial-generator/backend
      dockerfile: Dockerfile.backend
    image: muyongzhen/agetutor:tutorial-generator-backend-latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - app-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://tutorial-generator-backend:8004/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tutorial-generator-backend.rule=PathPrefix(`/tutorial-generator`)"
      - "traefik.http.services.tutorial-generator-backend.loadbalancer.server.port=8004"
    restart: on-failure

  # 微服务user-manager 后端
  user-manager-backend:
    build:
      context: ./services/user-manager/backend
      dockerfile: Dockerfile.backend
    image: muyongzhen/agetutor:user-manager-backend-latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - app-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://user-manager-backend:8005/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-manager-backend.rule=PathPrefix(`/user-manager`)"
      - "traefik.http.services.user-manager-backend.loadbalancer.server.port=8005"
    restart: on-failure

  # 微服务weather-entertainment 后端
  weather-entertainment-backend:
    build:
      context: ./services/weather-entertainment/backend
      dockerfile: Dockerfile.backend
    image: muyongzhen/agetutor:weather-entertainment-backend-latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - app-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://weather-entertainment-backend:8006/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weather-entertainment-backend.rule=PathPrefix(`/weather-entertainment`)"
      - "traefik.http.services.weather-entertainment-backend.loadbalancer.server.port=8006"
    restart: on-failure

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq_data: {}
  prometheus_data: {}
