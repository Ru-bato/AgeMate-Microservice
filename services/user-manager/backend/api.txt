数据设计:
username	VARCHAR(10)                     	用户名，非空（前端）
userID		INTERGER					        每次增加一个数据，标签userID自增1，由数据库自动实现，主码
password	VARCHAR(255)						前端自便吧，后端会用hash转变（字母、数字字符），非空（前端）
phone_number	CHAR(11)						11位（数字）
authority		SmallInteger		0:管理员	1:用户   数字，代表用户类型

使用Oauth2.0 + JWT进行身份验证，即使用该技术，不直接返回authority，而是提供对authority的编码，请求特殊函数时，先解码验证，为0:管理员允许调用；1:用户不允许调用返回{"status":"failed"}

输入格式:
使用class ...Request(BaseModel)
全部使用json报文进行api请求

返回格式：
@app.get
varchar、char、smallinterger返回键值对，key是字符串，就是“password”:"1a"/"sss111"、“authority”:0/1等这些下面写的名称
bool返回“status”：“true”/“false”

@app.post
返回{"status":"success"/"failed"}

@app.get (向数据库查询)
api					python函数	功能
/api/user/log			log_request	根据用户名、密码查找返回成功与否 "status":"success"/"failed"，成功需要返回使用authority得到的JWT
/api/user/account		get_account	若成功,自动根据用户名，查找返回userID、phnoe_number
/api/user/findback		find_userID	根据用户名，返回userID，失败返回"userID":"unknown"
/health                 health_check检查数据库连接是否正常

@app.post（向数据库增删改）
api					python函数	功能
/api/user/regist		    regist_request	根据输入的（格式验证交给前端）的username、password，写入数据库
/api/user/changeAccount		change_account	根据新的（格式验证交给前端）的userID(不变)、username、password、phone_number，写入数据库
/api/user/changePassword	change_password	根据新的（格式验证交给前端）的userID(不变)、password，写入数据库

@app.get (管理员向数据库查询，要进行身份鉴别，根据传递的JWT进行验证，等价authority为0才允许操作)
api					python函数	功能
/api/admin/users		show_userlists	返回所有用户ID和用户名
/api/admin/acount		show_account	根据用户ID，返回用户信息